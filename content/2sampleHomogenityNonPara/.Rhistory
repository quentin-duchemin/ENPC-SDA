colnames(data)
features <- colnames(data)[3:32];
df_benign <- data[data$diagnosis=="B",features];
df_malignant <- data[data$diagnosis=="M",features];
pvalues <- vector(length=length(features));
names(pvalues) <- features;
for (feature in features){
ksTest <- ks.test(df_benign[[feature]], df_malignant[[feature]]);
print(colnames(ksTest));
pvalues[feature] <- ksTest$p.value;
}
names(pvalues) <- features;
pvalues;
library("tidyverse")
data <- read.csv('../../data/covid.csv');
data <- data.frame(data);
data
colnames(data)
summary(data)
sapply(data, function(x) sum(is.na(x)))
colnames(data)
colnames(data)[1,3,9]
colnames(data)[[1,3,9]]
colnames(data)[1]
colnames(data)
7:20+40
7:20+[40]
append(7:20,[40,42])
append(seq(7,20),[40,42])
append(seq(7,20),c(40,42)
append(seq(7,20),c(40,42))
append(seq(7,20),c(40,42))
dfConditions = data[,append(seq(7,20),c(40,42))];
dfConditions
na.omit(dfDiseases)
dfDiseases = data[,22:39];
na.omit(dfDiseases)
na.omit(dfDiseases[-7])
dfDiseases = data[,22:39];
dfDiseases = dfDiseases[,-7];
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases = PairApply(disease[,names(dfDiseases) != "Patient_Age_Quantile"],cramerV, symmetric = TRUE)
# Displaying correlation with variable SARS_COV2_Result
dfDiseases[,2]
# Correlation plot
corrplot(dfDiseases, method = "square", type = "lower")
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases = PairApply(disease[,names(dfDiseases) != "Patient_Age_Quantile"],cramerV, symmetric = TRUE)
install.packages('DescTools')
library('DescTools')
install.packages('corrplot')
library('corrplot')
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases = PairApply(disease[,names(dfDiseases) != "Patient_Age_Quantile"],cramerV, symmetric = TRUE)
dfDiseases = data[,append(seq(22,39),c(1,2,3))];
dfDiseases = dfDiseases[,-7];
dfConditions = data[,append(seq(7,20),c(1,2,3,40,42))];
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases = PairApply(disease[,names(dfDiseases) != "Patient_Age_Quantile"],cramerV, symmetric = TRUE)
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases = PairApply(disease[,names(dfDiseases) != "Patient_Age_Quantile"], 'cramerV', symmetric = TRUE)
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases = PairApply(dfDiseases[,names(dfDiseases) != "Patient_Age_Quantile"], 'cramerV', symmetric = TRUE)
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases = PairApply(dfDiseases[,names(dfDiseases) != "Patient_Age_Quantile"], cramerV, symmetric = TRUE)
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases = PairApply(dfDiseases[,names(dfDiseases) != "Patient_Age_Quantile"], CramerV, symmetric = TRUE)
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases = PairApply(dfDiseases[,names(dfDiseases) != "Patient_Age_Quantile"], CramerV, symmetric = TRUE)
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases = PairApply(dfDiseases[,names(dfDiseases) != "Patient_Age_Quantile"], CramerV, symmetric = TRUE)
dfDiseases
data <- read.csv('../../data/covid.csv');
data <- data.frame(data);
function (..., list = character(), package = NULL, lib.loc = NULL,
verbose = getOption("verbose"), envir = .GlobalEnv, overwrite = TRUE)
dfDiseases = data[,append(seq(22,39),c(2,3))];
dfDiseases = dfDiseases[,-7];
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases.corr  = PairApply(dfDiseases[,names(dfDiseases) != "Patient_Age_Quantile"], CramerV, symmetric = TRUE)
# Displaying correlation with variable SARS_COV2_Result
dfDiseases.corr [,2]
# Correlation plot
corrplot(dfDiseases.corr , method = "square", type = "lower")
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases.corr  = PairApply(dfDiseases[,names(dfDiseases) != "Patient_Age_Quantile"], CramerV, symmetric = TRUE)
dfDiseases
dfDiseases = data[,append(seq(22,39),c(2,3))];
dfDiseases = dfDiseases[,-7];
dfDiseases
dfDiseases = na.omit(dfDiseases);
dfDiseases
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases.corr  = PairApply(dfDiseases[,names(dfDiseases) != "Patient_Age_Quantile"], CramerV, symmetric = TRUE)
# Displaying correlation with variable SARS_COV2_Result
dfDiseases.corr[,2]
# Correlation plot
corrplot(dfDiseases.corr , method = "square", type = "lower")
# Correlation plot
corrplot(dfDiseases.corr , method = "square", type = "full")
lower
# Correlation plot
corrplot(dfDiseases.corr , method = "square", type = "lower", number.cex=0.75)
# Correlation plot
corrplot(dfDiseases.corr , method = "square", type = "lower", number.cex=0.5)
# Dividing Train/Test data with 80% training and 20% test
sample_size <- floor(0.8 * nrow(dfDiseases))
train <- sample(nrow(disease), size = sample_size)
train <- sample(nrow(dfDiseases), size = sample_size)
dfDiseases.train <- as.data.frame(dfDiseases[train,])
dfDiseases.test <- as.data.frame(dfDiseases[-train,])
dfDiseases$test
dfDiseases.test
colnames(dfDiseases)
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases.corr  = PairApply(dfDiseases[,names(dfDiseases) != "Patient.Age.Quantile"], CramerV, symmetric = TRUE)
# Displaying correlation with variable SARS_COV2_Result
dfDiseases.corr[,2]
# Correlation plot
corrplot(dfDiseases.corr , method = "square", type = "lower", number.cex=0.5)
# Dividing Train/Test data with 80% training and 20% test
sample_size <- floor(0.8 * nrow(dfDiseases))
train <- sample(nrow(dfDiseases), size = sample_size)
dfDiseases.train <- as.data.frame(dfDiseases[train,])
dfDiseases.test <- as.data.frame(dfDiseases[-train,])
# Logistic regression considering top predictors
dfDiseases.function = paste("SARS.COV2.Result", "~", "Patient.Age.Quantile + Rhinovirus.OR.Enterovirus")
dfDiseases.glm = glm(as.formula(dfDiseases.function), data = dfDiseases.train , family = binomial)
# Logistic regression considering top predictors
dfDiseases.function = paste("SARS.Cov.2.exam.result", "~", "Patient.Age.Quantile + Rhinovirus.OR.Enterovirus")
dfDiseases.glm = glm(as.formula(dfDiseases.function), data = dfDiseases.train , family = binomial)
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases.corr  = PairApply(dfDiseases[,names(dfDiseases) != "Patient.age.quantile"], CramerV, symmetric = TRUE)
# Displaying correlation with variable SARS_COV2_Result
dfDiseases.corr[,2]
# Correlation plot
corrplot(dfDiseases.corr , method = "square", type = "lower", number.cex=0.5)
# Dividing Train/Test data with 80% training and 20% test
sample_size <- floor(0.8 * nrow(dfDiseases))
train <- sample(nrow(dfDiseases), size = sample_size)
dfDiseases.train <- as.data.frame(dfDiseases[train,])
dfDiseases.test <- as.data.frame(dfDiseases[-train,])
# Dividing Train/Test data with 80% training and 20% test
sample_size <- floor(0.8 * nrow(dfDiseases))
train <- sample(nrow(dfDiseases), size = sample_size)
dfDiseases.train <- as.data.frame(dfDiseases[train,])
dfDiseases.test <- as.data.frame(dfDiseases[-train,])
# Logistic regression considering top predictors
dfDiseases.function = paste("SARS.Cov.2.exam.result", "~", "Patient.age.quantile + Rhinovirus.OR.Enterovirus")
dfDiseases.glm = glm(as.formula(dfDiseases.function), data = dfDiseases.train , family = binomial)
# Logistic regression considering top predictors
dfDiseases.function = paste("SARS.Cov.2.exam.result", "~", "Patient.age.quantile + Rhinovirus.Enterovirus")
dfDiseases.glm = glm(as.formula(dfDiseases.function), data = dfDiseases.train , family = binomial)
summary(dfDiseases.glm)
as.formula(dfDiseases.function)
dfDiseases$SARS.Cov.2.exam.result
levels(as.factor(dfDiseases$SARS.Cov.2.exam.result))
dfDiseases$SARS.Cov.2.exam.result = (dfDiseases$SARS.Cov.2.exam.result == "positive")
dfDiseases.glm = glm(as.formula(dfDiseases.function), data = dfDiseases.train , family = binomial)
dfDiseases$SARS.Cov.2.exam.result
dfDiseases$SARS.Cov.2.exam.result = 1*(dfDiseases$SARS.Cov.2.exam.result == "positive")
dfDiseases$SARS.Cov.2.exam.result
dfDiseases.glm = glm(as.formula(dfDiseases.function), data = dfDiseases.train , family = binomial)
1*FALSE
1*TRUE
1*TRUE<=1
1<=1*TRUE<=1
1<=1*TRUE
data <- read.csv('../../data/covid.csv');
data <- data.frame(data);
data$SARS.Cov.2.exam.result = 1*(data$SARS.Cov.2.exam.result == "positive")
dfDiseases = data[,append(seq(22,39),c(2,3))];
dfDiseases = dfDiseases[,-7];
dfDiseases = na.omit(dfDiseases);
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases.corr  = PairApply(dfDiseases[,names(dfDiseases) != "Patient.age.quantile"], CramerV, symmetric = TRUE)
# CramerV Correlation to check for any correlation between catagorical variables
# Except Patient's age, all other variables are catagorical(binary)
dfDiseases.corr  = PairApply(dfDiseases[,names(dfDiseases) != "Patient.age.quantile"], CramerV, symmetric = TRUE)
# Displaying correlation with variable SARS_COV2_Result
dfDiseases.corr[,2]
# Displaying correlation with variable SARS_COV2_Result
dfDiseases.corr[,2]
# Correlation plot
corrplot(dfDiseases.corr , method = "square", type = "lower", number.cex=0.5)
# Dividing Train/Test data with 80% training and 20% test
sample_size <- floor(0.8 * nrow(dfDiseases))
train <- sample(nrow(dfDiseases), size = sample_size)
dfDiseases.train <- as.data.frame(dfDiseases[train,])
dfDiseases.test <- as.data.frame(dfDiseases[-train,])
# Logistic regression considering top predictors
dfDiseases.function = paste("SARS.Cov.2.exam.result", "~", "Patient.age.quantile + Rhinovirus.Enterovirus")
dfDiseases.glm = glm(as.formula(dfDiseases.function), data = dfDiseases.train , family = binomial)
summary(dfDiseases.glm)
dfPrediction  = data[,append(seq(7,20),c(2,3,40,42))];
# attaching the final dataset
attach(dfPrediction)
# Correlation between varables
dfPrediction.corr = cor(dfPrediction)
dfPrediction.corr[,2]
dfPrediction  = data[,append(seq(7,20),c(2,3,40,42))];
dfPrediction = na.omit(dfPrediction);
# attaching the final dataset
attach(dfPrediction)
# Correlation between varables
dfPrediction.corr = cor(dfPrediction)
dfPrediction.corr[,2]
# Correlation plot
corrplot(dfPrediction.corr, method = "square", type = "lower")
plot.new()
# attaching the final dataset
attach(dfPrediction)
# Correlation between varables
dfPrediction.corr = cor(dfPrediction)
dfPrediction.corr[,2]
# Correlation plot
corrplot(dfPrediction.corr, method = "square", type = "lower")
maximizeWindow()
# Correlation between variables
dfPrediction.corr = cor(dfPrediction)
dfPrediction.corr[,2]
# Correlation plot
corrplot(dfPrediction.corr, method = "square", type = "lower")
# Correlation plot
corrplot(dfPrediction.corr, method = "square", type = "lower", tl.cex = 0.1)
# Correlation plot
corrplot(dfPrediction.corr, method = "square", type = "lower", tl.cex = 0.1);
# Dividing Train/Test data with 80% training dataset
sample_size <- floor(0.8 * nrow(dfPrediction))
train_ind <- sample(nrow(dfPrediction), size = sample_size)
dfPrediction.train <- as.data.frame(dfPrediction[train_ind,])
dfPrediction.test <- as.data.frame(dfPrediction[-train_ind,])
# Logistic regression considering all the variables on the targer variable SARS_COV2_Result
dfPrediction.function = paste("SARS_COV2_Result", "~", "Patient_Age_Quantile + Leukocytes + Eosinophils + Red_blood_cell_distribution_width_RDW + Platelets + Proteina_C_reativa_mg_dL")
colnames(data)
# Logistic regression considering all the variables on the targer variable SARS_COV2_Result
dfPrediction.function = paste("SARS.Cov.2.exam.result", "~", "Patient.age.quantile + Leukocytes + Eosinophils + Red.blood.cell.distribution.width..RDW. + Platelets + Proteina.C.reativa.mg.dL")
dfPrediction.glm = glm(as.formula(dfPrediction.function), data => dfPrediction.train , family = binomial)
dfPrediction.glm = glm(as.formula(dfPrediction.function), data = dfPrediction.train , family = binomial)
summary(dfPrediction.glm)
# 10 fold cross-validation to verify the model
cv.glm(dfPrediction.train,dfPrediction.glm,K=10)$delta[1]
library(glmnet)
install.packages('glmnet')
library(glmnet)
# 10 fold cross-validation to verify the model
cv.glm(dfPrediction.train,dfPrediction.glm,K=10)$delta[1]
install.packages('boot')
install.packages("boot")
# 10 fold cross-validation to verify the model
cv.glm(dfPrediction.train,dfPrediction.glm,K=10)$delta[1]
library('boot')
# 10 fold cross-validation to verify the model
cv.glm(dfPrediction.train,dfPrediction.glm,K=10)$delta[1]
# Predicting on test data based on training set
dfPrediction.glm.predict <- predict(dfPrediction.glm,dfPrediction.test,type = "response")
summary(dfPrediction.glm.predict)
tapply(dfPrediction.glm.predict, dfPrediction.test$SARS.Cov.2.exam.result, mean)
# Confusion matrix for threshold of 1%
dfPrediction.confusion = table(dfPrediction.test$SARS.Cov.2.exam.result, dfPrediction.glm.predict > 0.01)
dfPrediction.confusion
# False negative error rate (Type II error)
dfPrediction.type2error = dfPrediction.confusion[1,1]/ (dfPrediction.confusion[1,1]+dfPrediction.confusion[2,2])
dfPrediction.type2error
rownames(dfPrediction.confusion) <- c("Predicted FALSE","PREDICTED TRUE");
print(dfPrediction.confusion);
rownames(dfPrediction.confusion) <- c("Predicted FALSE","Predicted TRUE");
print(dfPrediction.confusion);
# False negative error rate (Type II error)
dfPrediction.type2error = dfPrediction.confusion[1,1]/ (dfPrediction.confusion[1,1]+dfPrediction.confusion[2,2])
dfPrediction.type2error
print("Type II error",dfPrediction.type2error);
as.string(100)
as.character(100)
print(paste("The proportion of errors of Type II is ",as.character(dfPrediction.type2error)));
# Plotting ROCR curve
dfPrediction.ROCRpred = prediction(dfPrediction.glm.predict, dfPrediction.test$SARS.Cov.2.exam.result)
dfPrediction.ROCRperf = performance(dfPrediction.ROCRpred, "tpr", "fpr")
install.packages('ROCR')
# Plotting ROCR curve
dfPrediction.ROCRpred = prediction(dfPrediction.glm.predict, dfPrediction.test$SARS.Cov.2.exam.result)
library('ROCR') # to use prediction and performance functions for ROC curves
# Plotting ROCR curve
dfPrediction.ROCRpred = prediction(dfPrediction.glm.predict, dfPrediction.test$SARS.Cov.2.exam.result)
dfPrediction.ROCRperf = performance(dfPrediction.ROCRpred, "tpr", "fpr")
plot(dfPrediction.ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
# Creating a dataframe with variables and predicted values of SARS results
dfPrediction.predict.dataframe <- data.frame(
probability.of.having.SARS=dfPrediction.glm$fitted.values,
Leukocytes=dfPrediction.train$Leukocytes,
Patient_Age_Quantile = dfPrediction.train$Patien.age.quantile,
Eosinophils = dfPrediction.train$Eosinophils,
Red.blood.cell.distribution.width..RDW. => dfPrediction.train$Red.blood.cell.distribution.width..RDW.,
# Creating a dataframe with variables and predicted values of SARS results
dfPrediction.predict.dataframe <- data.frame(
probability.of.having.SARS=dfPrediction.glm$fitted.values,
Leukocytes=dfPrediction.train$Leukocytes,
Patient.age.quantile = dfPrediction.train$Patien.age.quantile,
Eosinophils = dfPrediction.train$Eosinophils,
Red.blood.cell.distribution.width..RDW. => dfPrediction.train$Red.blood.cell.distribution.width..RDW.,
# Creating a dataframe with variables and predicted values of SARS results
dfPrediction.predict.dataframe <- data.frame(
probability.of.having.SARS=dfPrediction.glm$fitted.values,
Leukocytes=dfPrediction.train$Leukocytes,
Patient.age.quantile = dfPrediction.train$Patien.age.quantile,
Eosinophils = dfPrediction.train$Eosinophils,
Red.blood.cell.distribution.width..RDW. = dfPrediction.train$Red.blood.cell.distribution.width..RDW.,
Platelets = dfPrediction.train$Platelets,
Proteina.C.reativa.mg.dL = dfPrediction.train$Proteina.C.reativa.mg.dL)
dfPrediction.ROCRpred
# Creating a dataframe with variables and predicted values of SARS results
dfPrediction.predict.dataframe <- data.frame(
probability.of.having.SARS=dfPrediction.glm$fitted.values,
Leukocytes=dfPrediction.train$Leukocytes,
Patient.age.quantile = dfPrediction.train$Patien.age.quantile,
Eosinophils = dfPrediction.train$Eosinophils,
Red.blood.cell.distribution.width..RDW. = dfPrediction.train$Red.blood.cell.distribution.width..RDW.,
Platelets = dfPrediction.train$Platelets,
Proteina.C.reativa.mg.dL = dfPrediction.train$Proteina.C.reativa.mg.dL)
dfPrediction.glm$fitted.values
length(dfPrediction.glm$fitted.values)
length(dfPrediction.test$Platelets)
length(dfPrediction.train$Platelets)
data.frame(
probability.of.having.SARS=dfPrediction.glm$fitted.values,
Leukocytes=dfPrediction.train$Leukocytes,
Patient.age.quantile = dfPrediction.train$Patien.age.quantile,
Eosinophils = dfPrediction.train$Eosinophils,
Red.blood.cell.distribution.width..RDW. = dfPrediction.train$Red.blood.cell.distribution.width..RDW.,
Platelets = dfPrediction.train$Platelets,
Proteina.C.reativa.mg.dL = dfPrediction.train$Proteina.C.reativa.mg.dL)
# Creating a dataframe with variables and predicted values of SARS results
dfPrediction.predict.dataframe <- data.frame(
probability.of.having.SARS=dfPrediction.glm$fitted.values,
Leukocytes=dfPrediction.train$Leukocytes,
Patient.age.quantile = dfPrediction.train$Patient.age.quantile,
Eosinophils = dfPrediction.train$Eosinophils,
Red.blood.cell.distribution.width..RDW. = dfPrediction.train$Red.blood.cell.distribution.width..RDW.,
Platelets = dfPrediction.train$Platelets,
Proteina.C.reativa.mg.dL = dfPrediction.train$Proteina.C.reativa.mg.dL)
plot1 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Patient.age.quantile, y=probability.of.having.SARS)) +
geom_point(aes(color=Patient.age.quantile), size=4)
plot2 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Leukocytes, y=probability.of.having.SARS)) +
geom_point(aes(color=Leukocytes), size=4)
plot1 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Patient.age.quantile, y=probability.of.having.SARS)) +
geom_point(aes(color=Patient.age.quantile), size=4)
library('ggplot2') # to use the function ggplot
plot1 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Patient.age.quantile, y=probability.of.having.SARS)) +
geom_point(aes(color=Patient.age.quantile), size=4)
plot2 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Leukocytes, y=probability.of.having.SARS)) +
geom_point(aes(color=Leukocytes), size=4)
plot3 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Red.blood.cell.distribution.width..RDW., y=probability.of.having.SARS)) +
geom_point(aes(color=Red.blood.cell.distribution.width..RDW.), size=4)
plot4 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Eosinophils, y=probability.of.having.SARS)) +
geom_point(aes(color=Eosinophils), size=4)
plot5 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Platelets, y=probability.of.having.SARS)) +
geom_point(aes(color=Platelets), size=4)
plot6 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Proteina.C.reativa.mg.dL, y=probability.of.having.SARS)) +
geom_point(aes(color=Proteina.C.reativa.mg.dL), size=4)
# Plotting the values
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=3 , nrow = 2)
data.frame(
probability.of.having.SARS=dfPrediction.glm$fitted.values,
Leukocytes=dfPrediction.train$Leukocytes,
Patient.age.quantile = dfPrediction.train$Patien.age.quantile,
Eosinophils = dfPrediction.train$Eosinophils,
)
library(gridExtra)
data.frame(
probability.of.having.SARS=dfPrediction.glm$fitted.values,
Leukocytes=dfPrediction.train$Leukocytes,
Patient.age.quantile = dfPrediction.train$Patien.age.quantile,
Eosinophils = dfPrediction.train$Eosinophils,
)
library(grid)
data.frame(
probability.of.having.SARS=dfPrediction.glm$fitted.values,
Leukocytes=dfPrediction.train$Leukocytes,
Patient.age.quantile = dfPrediction.train$Patien.age.quantile,
Eosinophils = dfPrediction.train$Eosinophils,
)
library(lattice)
library(lattice)
data.frame(
probability.of.having.SARS=dfPrediction.glm$fitted.values,
Leukocytes=dfPrediction.train$Leukocytes,
Patient.age.quantile = dfPrediction.train$Patien.age.quantile,
Eosinophils = dfPrediction.train$Eosinophils,
)
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=3 , nrow = 2)
library('DescTools')
library('DescTools')
library("tidyverse")
library('corrplot')
library('boot') # to use cv.glm for Cross-Validation
library('corrplot')
library('boot') # to use cv.glm for Cross-Validation
library('ROCR') # to use prediction and performance functions for ROC curves
library('ggplot2') # to use the function ggplot
data <- read.csv('../../data/covid.csv');
data <- read.csv('../../data/covid.csv');
data <- data.frame(data);
data$SARS.Cov.2.exam.result = 1*(data$SARS.Cov.2.exam.result == "positive")
dfDiseases = data[,append(seq(22,39),c(2,3))];
dfDiseases = dfDiseases[,-7];
dfDiseases = na.omit(dfDiseases);
dfPrediction  = data[,append(seq(7,20),c(2,3,40,42))];
dfPrediction = na.omit(dfPrediction);
dfDiseases = data[,append(seq(22,39),c(2,3))];
dfDiseases = dfDiseases[,-7];
dfDiseases = na.omit(dfDiseases);
dfPrediction = na.omit(dfPrediction);
# attaching the final dataset
attach(dfPrediction)
dfPrediction.corr[,2]
# Dividing Train/Test data with 80% training dataset
sample_size <- floor(0.8 * nrow(dfPrediction))
train_ind <- sample(nrow(dfPrediction), size = sample_size)
dfPrediction.train <- as.data.frame(dfPrediction[train_ind,])
dfPrediction.test <- as.data.frame(dfPrediction[-train_ind,])
# Logistic regression considering all the variables on the targer variable SARS_COV2_Result
dfPrediction.function = paste("SARS.Cov.2.exam.result", "~", "Patient.age.quantile + Leukocytes + Eosinophils + Red.blood.cell.distribution.width..RDW. + Platelets + Proteina.C.reativa.mg.dL")
dfPrediction.glm = glm(as.formula(dfPrediction.function), data = dfPrediction.train , family = binomial)
summary(dfPrediction.glm)
# 10 fold cross-validation to verify the model
cv.glm(dfPrediction.train,dfPrediction.glm,K=10)$delta[1]
# Predicting on test data based on training set
dfPrediction.glm.predict <- predict(dfPrediction.glm,dfPrediction.test,type = "response")
summary(dfPrediction.glm.predict)
tapply(dfPrediction.glm.predict, dfPrediction.test$SARS.Cov.2.exam.result, mean)
# Confusion matrix for threshold of 1%
dfPrediction.confusion = table(dfPrediction.test$SARS.Cov.2.exam.result, dfPrediction.glm.predict > 0.01)
rownames(dfPrediction.confusion) <- c("Predicted FALSE","Predicted TRUE");
print(dfPrediction.confusion);
# False negative error rate (Type II error)
dfPrediction.type2error = dfPrediction.confusion[1,1]/ (dfPrediction.confusion[1,1]+dfPrediction.confusion[2,2])
print(paste("The proportion of errors of Type II is ",as.character(dfPrediction.type2error)));
# Plotting ROCR curve
dfPrediction.ROCRpred = prediction(dfPrediction.glm.predict, dfPrediction.test$SARS.Cov.2.exam.result)
plot(dfPrediction.ROCRperf, colorize=TRUE, print.cutoffs.at=seq(0,1,by=0.1), text.adj=c(-0.2,1.7))
# Creating a dataframe with variables and predicted values of SARS results
dfPrediction.predict.dataframe <- data.frame(
probability.of.having.SARS=dfPrediction.glm$fitted.values,
Leukocytes=dfPrediction.train$Leukocytes,
Patient.age.quantile = dfPrediction.train$Patient.age.quantile,
Eosinophils = dfPrediction.train$Eosinophils,
Red.blood.cell.distribution.width..RDW. = dfPrediction.train$Red.blood.cell.distribution.width..RDW.,
Platelets = dfPrediction.train$Platelets,
Proteina.C.reativa.mg.dL = dfPrediction.train$Proteina.C.reativa.mg.dL)
plot1 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Patient.age.quantile, y=probability.of.having.SARS)) +
geom_point(aes(color=Patient.age.quantile), size=4)
plot2 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Leukocytes, y=probability.of.having.SARS)) +
geom_point(aes(color=Leukocytes), size=4)
plot3 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Red.blood.cell.distribution.width..RDW., y=probability.of.having.SARS)) +
geom_point(aes(color=Red.blood.cell.distribution.width..RDW.), size=4)
plot4 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Eosinophils, y=probability.of.having.SARS)) +
geom_point(aes(color=Eosinophils), size=4)
plot5 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Platelets, y=probability.of.having.SARS)) +
geom_point(aes(color=Platelets), size=4)
plot6 = ggplot(data=dfPrediction.predict.dataframe, aes(x=Proteina.C.reativa.mg.dL, y=probability.of.having.SARS)) +
geom_point(aes(color=Proteina.C.reativa.mg.dL), size=4)
# Plotting the values
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=3 , nrow = 2)
library('lattice')
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=3 , nrow = 2)
library('gridExtra')
grid.arrange(plot1, plot2, plot3, plot4, plot5, plot6, ncol=3 , nrow = 2)
# Plotting Separate probability graphs
plotting.function <- function(var,variableORrank){
dfPrediction.sep.function = paste("SARS.Cov.2.exam.result", "~", as.character(var))
dfPrediction.sep.glm = glm(as.formula(dfPrediction.sep.function), data = dfPrediction.train , family = binomial)
print(summary(dfPrediction.sep.glm))
cv.glm(dfPrediction.train,dfPrediction.sep.glm,K=10)$delta[1]
dfPrediction.predicted.data <- data.frame(
probability.of.SARS=dfPrediction.sep.glm$fitted.values,
variable=dfPrediction.train[,as.character(var)])
dfPrediction.predicted.data <- dfPrediction.predicted.data[
order(dfPrediction.predicted.data$variable, decreasing=FALSE),]
dfPrediction.predicted.data$rank <- 1:nrow(dfPrediction.predicted.data)
ggplot(data=dfPrediction.predicted.data, aes(x= variable, y=probability.of.SARS)) +
geom_point(aes(color=variable), size=3) +
xlab(as.character(var)) +
ylab("Probability of having SARS CoV-2") +
scale_colour_gradient(low = "darkgreen", high = "darkred", na.value = NA) +
ggtitle(coef(summary(dfPrediction.sep.glm))[,'Pr(>|z|)'])
}
plotfun1 = plotting.function("Platelets")
plotfun2 = plotting.function("Monocytes")
plotfun3 = plotting.function("Hemoglobin")
plotfun4 = plotting.function("Red_blood_cells")
plotfun5 = plotting.function("Mean_platelet_volume")
plotfun4 = plotting.function("Red.blood.cell.distribution.width..RDW.")
plotfun5 = plotting.function("Mean_platelet_volume")
plotfun5 = plotting.function("Platelets")
grid.arrange(plotfun1, plotfun2, plotfun3, plotfun4, plotfun5, ncol=3 , nrow = 2)
colnames(dfPrediction)
